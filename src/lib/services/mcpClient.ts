import type { ScrapeResult } from "@/lib/definitions";

/**
 * MOCK MCP Client
 * This is a placeholder for a real Playwright MCP client.
 * It simulates scraping a URL and returns a fixed data structure.
 *
 * To implement a real client, you would use a Playwright MCP library
 * to connect to a server (e.g., at process.env.MCP_SERVER_URL)
 * and execute browser automation tasks.
 */
export const mcpClient = {
  scrape: async (url: string): Promise<ScrapeResult> => {
    console.log(`[Mock MCP Client] Scraping ${url}...`);

    // Simulate network delay
    await new Promise(resolve => setTimeout(resolve, 1500));

    // Basic validation
    if (!url || !url.startsWith('http')) {
      throw new Error("Invalid URL provided to mock scraper.");
    }
    
    // Simulate a successful scrape for a specific domain
    if (url.includes("example.com")) {
      return {
        title: "Example Domain",
        links: [
          { href: "https://www.iana.org/domains/example", text: "More information..." }
        ],
        textSummary: "This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission. It is a classic example."
      };
    }

    // Simulate a generic scrape
    return {
      title: `Mock Scrape of: ${new URL(url).hostname}`,
      links: [
        { href: `${url}#link1`, text: "Mock Link 1" },
        { href: `${url}#link2`, text: "Mock Link 2" },
        { href: `${url}/about`, text: "About Us" },
        { href: `${url}/contact`, text: "Contact Page" },
      ],
      textSummary: `This is a mock summary for the page at ${url}. In a real implementation, this would be a text summary generated by an LLM based on the full text content of the page, providing a concise overview.`
    };
  }
};
